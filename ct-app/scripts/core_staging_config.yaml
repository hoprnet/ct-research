---
# =============================================================================
# 
# =============================================================================
flags:
  core: 
    healthcheck: 10
    checkSubgraphURLs: 30
    getFundings: 30
    getTicketPrice: 30
    aggregatePeers: 30
    getTopologyData: 30
    getSubgraphData: 30
    getRegisteredNodes: 30
    getNFTHolders: 30
    getPeersRewards: 30
    applyEconomicModel: 30
    distributeRewards: ~
    
  node:
    healthcheck: 10
    retrievePeers: 30
    retrieveIncomingChannels: 30
    retrieveOutgoingChannels: 30
    retrieveBalances: 30
    openChannels: ~
    closeOldChannels: ~
    closePendingChannels: ~
    fundChannels: ~
    closeIncomingChannels: ~
    getTotalChannelFunds: ~
    
# =============================================================================
# 
# =============================================================================
economicModel:
  minSafeAllowance: -1
  NFTThreshold: ~

  legacy:
    proportion: 0.9
    apr: 12.0

    coefficients:
      a: 1
      b: 1
      c: 3
      l: 0
    
    equations: 
      fx: 
        formula: "a * x"
        condition: "l <= x <= c"
      gx:
        formula: "a * c + (x - c) ** (1 / b)"
        condition: "x > c"

  sigmoid:
    proportion: 0.1
    maxAPRPercentage: 15.0
    offset: 10
    networkCapacity: 50
    totalTokenSupply: 1000000000

    buckets:
      economicSecurity:
        flatness: 1.65
        skewness: 1.50
        upperbound: 0.5
      networkCapacity:
        flatness: 10.0
        skewness: 2.75
        upperbound: 1.0

  budget:
    period: 1200
    countsInPeriod: 1
    winningProbability: 1

# =============================================================================
# 
# =============================================================================
distribution:
  minEligiblePeers: 500
  messageDeliveryDelay: 10.0
  delayBetweenTwoMessages: 0.2
  maxIterations: 6

# =============================================================================
# 
# =============================================================================
gcp:
  filePrefix: expected_reward
  folder: expected_rewards
  bucket: hoprnet-ctdapp-staging

# =============================================================================
# 
# =============================================================================
peer:
  minVersion: '2.0.7'

# =============================================================================
# 
# =============================================================================
channel:
  minBalance: 0.05
  fundingAmount: 0.2
  maxAgeSeconds: 60

# =============================================================================
# 
# =============================================================================
rabbitmq:
  taskName: fake_task
  projectName: ct-app

# =============================================================================
# 
# =============================================================================
subgraph:
  safesBalance:
    queryID: FcyLT3XGc2nEtaKjfB2SqigXsrEaGGBYsDfhEmsQ26dA
    URLBackup: https://api.studio.thegraph.com/query/40439/hopr-nodes-rotsee/version/latest

  staking:
    queryID: DrkbaCvNGVcNH1RghepLRy6NSHFi8Dmwp4T2LN3LqcjY
    URLBackup: https://api.studio.thegraph.com/query/40439/hopr-stake-all-seasons/v0.0.10
  
  wxHOPRTxs:
    queryID: ~
    URLBackup: https://api.studio.thegraph.com/query/58438/wxhoprtransactions/v0.0.6
  
  rewards:
    queryID: ~ #Feg6Jero3aQzesVYuqk253NNLyNAZZppbDPKFYEGJ1Hj
    URLBackup: https://api.studio.thegraph.com/query/40439/hopr-channels/version/latest
...